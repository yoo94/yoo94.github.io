---
layout: post
title: "개발자는 디버깅을 잘하자"
summary: "디버깅에대한 중요성과 회고"
author: yoo94
date: "2025-03-11 5:30:23 +0530"
category: DevLog
keywords: 디버깅 방법,브레이크포인트 활용법,콘솔 로그 팁,네트워크 탭 분석,프론트엔드 디버깅,DevTools 가이드
tags:
  - 웹개발
  - 디버깅
  - 디버깅의 유래
  - 개발자도구
  - 리액트
  - react
  - front end
  - 프론트엔드
  - 좋은개발
  - debugging
  - debug
  - 디버깅꿀팁
  - DevTools
thumbnail: /blog/postImg/20250811bughunter.png
permalink: blog/react/react-up12/
---

## 제발 디버깅을 해주세요.. ㅜㅡㅜ

첫번째 직장인 si/솔루션 기반의 회사에서 신입들을 데리고 프로젝트를 자주 나갔었고, (풀스택)

두번째 라이브 서비스 플랫폼 회사에서는 프론트엔드 개발팀 리드개발자를 맡고있다. (프론트)

신입들에게도 그렇고, 팀원들에게도 디버깅의 중요성을 그렇게 두번 세번 네번 강조하는데. 다들.. 들은척도 안하신다..ㅎㅎ;;

요즘은 개발을 몰라도 바이브 코딩으로 개발할 수 있는 시대이기 떄문에, 디버깅 실력이 가장 중요한 개발 덕목중에 하나라고 생각한다.

개발자 경력은 얼마 되지 않았지만, 그전에 기획업무도 했었어서 사회경력으로는 7년 이상 사회생활을 했고, 개발이든 아니든 업무에서 가장 중요한것이 디버깅이라고 생각하고 있기때문에 관련 글을 쓰고자 한다.

제발 이 글을 본다면, 에러가 났을때 소스만 뚫어지게 보고있지말고 제발!! 디버깅을 하시길.... 
최악의 경우, 실제 운영하는 서버에서 버그가 생겼을때에, 디버깅을 못해서 원인을 못찾으면
최소 무능, 최대 퇴사로 책임을 덤탱이 쓸 수도 있다.. 제발... 디버깅.. 

---

### 목차
1. [디버깅이란?](#1-디버깅이란-디버깅의-유래)
2. [왜 디버깅을 잘 해야하지?](#2-왜-디버깅을-잘-해야하지)
3. [개발자에게 디버깅이란?](#3-개발자에게-디버깅이란)
4. [기본적인 디버깅은?](#4-기본적인-디버깅은)
5. [올바른 디버깅 예시](#5-올바른-디버깅-예시)
6. [정리](#6-정리)


---

## 1. 디버깅이란, 디버깅의 유래?

디버깅은 여러 서비스, 소프트웨어에서 소스 코드의 오류 또는 버그를 찾아서 수정하는 과정을 말한다. 

 1940년대에 하버드 대학에서 근무했던 Grace Hopper 제독의 동료 중 한 명이 대학의 컴퓨터 작동을 방해하는 나방을 발견하자, 그녀는 동료들에게 ‘시스템ㅁ을 디버깅하고 있구나’라고 말했다고한다. 컴퓨터 프로그래머들은 1950년대에 버그와 디버깅이라는 용어를 처음 사용한 것으로 기록되었고, 1960년대 초에 프로그래밍 커뮤니티에서 디버깅이라는 용어를 일반적으로 사용하게 되었다.

<div style="display: flex; justify-content: center;">
  <img src="/blog/postImg/debugwhen.png" alt="디버깅유래" style="width:auto; height:auto;">
</div>

---

## 2. 왜 디버깅을 잘 해야하지?

  개발에서 뿐만 아니라, 일반 사무 업무에서도 버그는 많이 발생 한다. 이메일이 누락됐거나, 보고서가 틀렸을때, 단순하게 "다시 보내자" 가 아니라 왜 그런일이 생겼는지 파악하는 것이 디버깅적 접근이라고 할 수 있다.
   재현 가능한 패턴을 찾고, 버그 리포트나 문제 해결 로그를 남긴다면 추후에, 팀 전체가 같은 실수를 반복하지 않게 된다.
   
##### 🔍 디버깅적 사고는 곧 스마트한 업무 처리

즉, 개발이든 사무든, 디버깅을 잘한다는 건 문제를 빠르게 파악하고 정확하게 해결하는 능력이 있다. 라는 말이 된다.

## 3. 개발자에게 디버깅이란?

  단순한 오류 수정 과정이 아니다. 코드와 시스템을 깊이 이해하고 통제하는 과정이라고 볼 수 있따.
 디버깅은 개발자의 탐정 모드라고 할 수 있다.
 - 문제 해결의 기술 : 코드가 예상대로 동작하지 않으면, 원인을 추적하고 해결하는 과정
 - 코드의 흐름, 데이터의 이동, 함수 간 상호작용을 자연스럽게 파악하게 된다. 특히 다른 사람의 코드를 이해할 때 디버깅은 최고의 도구이다.
 - 가설을 세우고, 테스트하고, 결과를 분석하는 반족벅인 과정이다.
 - 디버깅 툴을 다루는 것도 중요하지만, 로그를 보고 "이상하다"는 걸 알아차리는 감각도 중요하다.
 - 버그 리포트, 재현 방법과 설명, 수정 내역 공유등은 팀워크의 기반이 된다.

  나는 회사를 다니면서, 2년차 때부터 버그나 오류가 생겼을때마다 불려 다녔다. 디버깅을 정말 열심히 했고 잘했기 때문이라고 생각한다.
팀장들이 항상, 이런 오류 있을때는 ㅇㅇ대리,연구원을 찾으면 해결 된다고 말했을 정도로 디버깅을 잘한다고 자부한다.

 우리(개발자) 에게 디버깅이란 코드의 진짜 얼굴을 마주하는 순간이자, 쾌감을 느낄 수 있는 과정이 아닐까.

## 4. 내가 생각하는 디버깅절차?

 ```txt
1. 문제 재현하기 가장 먼저 해야 할 일은 버그를 재현하는 것 언제, 어떤 조건에서 문제가 발생하는지 확인해야 원인을 찾을 수 있음 
예: "로그인 버튼을 누르면 앱이 멈춘다 → 특정 브라우저에서만 발생" 

2. 로그 확인하기 콘솔 로그, 서버 로그, 에러 메시지를 꼼꼼히 살펴보기 로그는 디버깅의 나침반 역할을 함 
예: NullPointerException이 발생한 라인 번호, 변수 값 확인 

3. 디버깅 도구 활용하기 IDE의 디버거 기능을 사용해 브레이크포인트 설정, 변수 값 추적, 스택 확인 
예: 개발자도구, VS Code, IntelliJ, PyCharm, Chrome DevTools 등 

4. 코드 흐름 따라가기 함수 호출 순서, 조건문 분기, 반복문 등을 따라가며 논리적 흐름을 점검 
예: "이 함수가 호출되기 전에 값이 초기화됐는가?" 

5. 가설 세우고 테스트하기 "이 부분이 문제일지도 몰라" → 수정 → 테스트 → 결과 확인 실패해도 괜찮아. 반복하면서 원인을 좁혀가는 게 핵심 6. 문제 원인 문서화하기 어떤 문제가 있었고, 어떻게 해결했는지 기록해두면 나중에 큰 도움이 됨 팀원과 공유하면 협업에도 유리함 
 ```

## 4-2. 기본적인 디버깅의 올바른 예시

🧪 예시: 자바스크립트에서 버튼 클릭이 작동하지 않을 때
```js
document.getElementById("myBtn").addEventListener("click", function() {
  console.log("Button clicked!");
});
```
디버깅 순서:
1. 콘솔에 에러 메시지 있는지 확인
2. myBtn이라는 ID가 실제로 존재하는지 HTML 확인
3. 스크립트가 DOM 로딩 전에 실행됐는지 확인 (DOMContentLoaded 이벤트 활용)
4. 브레이크포인트 걸고 이벤트가 실행되는지 확인

---

## 5. 디버깅 꿀팁 (프론트엔드라면 개발자도구로 웬만하면 끝난다!)

 기본적으로는 4번의 절차를 따라가나, 프론트엔드같은 경우에는 대부분 개발자 도구에서 끝이난다.
모던 자바스크립트 프레임워크는 대부분 허스키라는 툴을 사용하여 커밋이나 푸시 전에 한번 점검을하고
ci/cd 과정 중(특히 빌드과정) 에서 대부분의 ux/ui오류는 잡힌다. 또한 타입스크립트라는 굉장히 좋은 라이브러리가 등장함으로써
거의 모든 타입에러가 잡히게 되었다. 그럼 클라이언트 쪽에서 나는 에러는 무엇일까?
##### 바로 api통신 오류이다.
third-party 이든, 백엔드 api든 간에 거의 대부분이 버그는 데이터 패칭에서 발생하고, 개발자 도구의 네트워크 탭에서 확인이 가능하다. 

<div style="display: flex; justify-content: center;">
  <img src="/blog/postImg/250811devtool1.png" alt="디버깅유래" style="width:auto; height:auto;">
</div>

- 정적리소스(이미지, 영상, js, css 파일들)들과 클라이언트에서 호출하는 대부분의 api는 여기서 확인 할 수 있다.
   - 상태코드들도 확인 가능하며, 그안에 호출 파라미터가 무엇인지, 응답값은 무엇인지 검색도 가능하다.
- 요청 상세 정보 열기 헤더(Headers) 탭에서 요청 파라미터와 응답 헤더를, 응답(Response) 탭에서 실제 반환된 데이터를 확인할 수 있다.
- 재실행 및 복제 특정 요청을 우클릭해 ‘Replay XHR’ 또는 ‘Copy as cURL’을 선택해 동일한 요청을 반복 테스트할 수 있다.

또한 개발자도구에서 브레이크 포인트를 잡아 펑션키들을 이용해 흐름을 따라 갈 수 있다.
```txt
F8 – 계속(Resume) 실행 
F10 – 한 줄씩 실행(Step Over) 
F11 – 함수 내부로 들어가기(Step Into)
```

그리고 가장 활용도가 높은 것이 아래의

##### 콘솔(Console) 탭 활용 팁이다. 
console.log()와 워치 표현식(Watch Expressions)을 사용해 특정 변수나 표현식 결과를 실시간 관찰한다.
오류 수준별 필터링(Error, Warning, Info) 기능으로 중요한 메시지를 빠르게 찾는다.
콘솔에서 자바스크립트 코드를 직접 실행해, 수정 전후 동작 차이를 즉시 비교할 수 있다.
또한 브레이크포인트를 찍어놓고 실시간으로 변수값을 변경하여 다양한 테스트를 할 수 있따.

##### 성능(Performance) 및 기타 기능
요청 지연 네트워크 모드(Throttling) 3G, 4G 같은 느린 네트워크 환경을 시뮬레이션해 성능 문제를 미리 점검할 수 있다.
화면 요소 검사(Elements) HTML 구조나 CSS 스타일을 실시간으로 수정해 레이아웃·스타일 문제를 즉시 디버깅할 수 있다.
애플리케이션(Application) 탭 로컬 스토리지, 쿠키, 세션 스토리지 등의 저장 데이터를 확인·삭제하면서 인증·상태 관련 버그를 잡는다.

---
만약 백엔드라면... 다음번 포스팅에서 다뤄보겠다. 프론트 엔드 또한 모던 자스로 넘어오면서 개발자도구로만 안되는 경우가 왕왕많다.
예를 들어 ssr로 빌드타임에 서버에서 데이터패칭이 되어, 클라이언트에서 확인이 불가능한 경우등이 해당되는데, 다음편에서 자세하게 서술하고자한다.

## 6. 정리

버그 헌터가 되어 코드 속 사건 현장을 누비며, 단 한 줄의 로그와 브레이크포인트로 범인을 지목하는 짜릿한 경험이 바로 디버깅이다. 
문제 재현 → 로그 확인 → 디버거 활용 → 가설 검증의 순서는 개발자라면 반드시 숙지하고 있어야한다고 생각한다.
![버그헌터](/blog/postImg/20250811bughunter.png)